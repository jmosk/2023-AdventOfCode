 apl1b_trace←{
     d←⊃⎕NGET'test1b.txt' 1
     ⎕←d
     digits←'one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine'∘.⍷d  ⍝ 9 rows with 1 where each digit exists
     ⍝ Multiple each row by digit number, then sum by columns and you get where digits start
     numLoc←⊃+⌿(⍳9)×{digits[⍵;]}¨⍳9     ⍝ Where words start two1nine = 2 0 0 0 9 0 0 0
     ⎕←'' ⋄ ⎕←numLoc

⍝   Old version below went here. Now replaced with "selectve replacement"

     word2Num←d
     mask←numLoc>0                 ⍝ Where the digits are to be placed
     ⎕←'' ⋄ ⎕←mask
     fillData←(mask/¨numLoc)       ⍝ Get the replacement digis alone
     ⎕←'' ⋄ ⎕←fillData
     fillData←{(1↓⎕D)[⍵]}¨fillData         ⍝ Convert the digits to characters
     ⎕←'' ⋄ ⎕←fillData
     (mask/¨word2Num)←fillData      ⍝ Put the chars into the data vector in the right place
     ⎕←'' ⋄ ⎕←word2Num

⍝   This is the initial way to merge the digits into the data. It is very
⍝   involved in creating a matrix of <data,111...,222..., ... 999...>
⍝   then putting the original data in place of the string of digits
⍝   where the original data remains. Then we rotate each row by 1 and use
⍝   the first character of each row which has the correct letter in its
⍝   position. A convoluted way of doing this until I learn of
⍝   "selective replacement" through a stackoverflow post.

⍝     offsets←1+numLoc
⍝     ⎕←'' ⋄ ⎕←offsets
⍝     dataNums←{(⊂⍵),1↓(⍴⍵)⍴¨⎕D}¨d     ⍝ each element followed by numbers
⍝     subs←dataNums{⍺[⍵]}¨offsets    ⍝ put numbers in position of its word ('1'=one, '2'=two, ...)
⍝     ⎕←'' ⋄ ⎕←subs
⍝     sizes←⍴¨d               ⍝ Size of each matrix (n x n)
⍝     ⍝ rotate each row element by position number - abcd bcda 6666 dabc
⍝     ⍝ the pick the first character of each element -   ab6d - inserted 6 in correct position
⍝     ⎕←'' ⋄ ⎕←word2Num←{⊃¨(¯1+⍳(⊃sizes[⍵]))⌽¨⊃subs[⍵]}¨⍳⍴d

⍝   Now that the words have been converted to its number equivalent, use
⍝   the solution to part 1 to calculate the answer.

     apl1a_common word2Num
 }
